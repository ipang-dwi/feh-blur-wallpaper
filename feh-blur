#!/usr/bin/env bash

PROC_EXPR="bash.*$(basename "$0")"
BIN="$(basename "$0")"
CACHE_DIR="/tmp/feh-blur.$$"
ANIMATION_INTERVAL=0.005
VERBOSE=0
wall_original="$CACHE_DIR/original.png"
wall_blurred="$CACHE_DIR/blur-0.png"

# Echo some info
info () {
  if [[ "$VERBOSE" == 1 ]]; then
    echo "==> $1"
  fi
}

# Log some debug info
debug () {
  if [[ "$VERBOSE" == 1 ]]; then
    echo "  - $1"
  fi
}

# Generate a bunch of images
generate_blurred_images () {
  mkdir -p "$CACHE_DIR"
  local source="$1"
  local original="$CACHE_DIR/original.png"
  local destination="$CACHE_DIR/blur-0.png"

  cp "$source" "$original"

  info "Generating blurred images from '$source'..."
  gm convert "$original" \
    -resize 1920x \
    -scale 33% \
    -blur 0x2 \
    -scale 300% \
    "$CACHE_DIR/blur-0.png"
  gm convert "$CACHE_DIR/blur-0.png" \
    -scale 33% \
    -blur 0x8 \
    -scale 300% \
    "$CACHE_DIR/blur-1.png"
  gm convert "$CACHE_DIR/blur-0.png" \
    -scale 33% \
    -blur 0x12 \
    -scale 300% \
    "$CACHE_DIR/blur-final.png"
  info "Done."
}

# Get current feh wallpaper
get_feh_wallpaper() {
  tail -n1 "$HOME/.fehbg" | cut -d"'" -f2
}

# get_current_workspace => "2"
get_current_workspace() {
  # 2 * DG: N/A VP: 0,0 WA: N/A Name
  wmctrl -d | grep '\*' | cut -d' ' -f1
}

# get_open_windows_count() => "2"
get_open_windows_count() {
  workspace="$(get_current_workspace)"
  wmctrl -l | cut -d' ' -f3 | grep -c "$workspace"
}

is_blank() {
  count=$(get_open_windows_count)
  [[ "$count" -eq 0 ]]
}

set_blurred_wallpaper() {
  debug "Setting blurred wallpaper"
  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-0.png"
  sleep $ANIMATION_INTERVAL
  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-1.png"
  sleep $ANIMATION_INTERVAL
  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-final.png"
}

set_original_wallpaper() {
  debug "Setting original wallpaper"
  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-1.png"
  sleep $ANIMATION_INTERVAL
  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-0.png"
  sleep $ANIMATION_INTERVAL
  feh --no-fehbg --bg-fill "$wall_original"
}

kill_other_instances() {
  while [[ $(pgrep -fcl "$PROC_EXPR") -gt 1 ]]; do
    old_pid="$(pgrep -fo "$PROC_EXPR")"
    echo "$BIN found ($old_pid), killing"
    kill "$old_pid"
    sleep 0.1
  done
}

run_loop () {
  state_blank=""
  state_wallpaper=""

  while true; do
    # Check if wallpaper has changed.
    now_wallpaper="$(get_feh_wallpaper)"
    if [[ "$state_wallpaper" != "$now_wallpaper" ]]; then
      if [[ -z "$now_wallpaper" ]]; then
        echo "Can't find wallpaper. Set a wallpaper using feh first."
        exit
      fi
      generate_blurred_images "$now_wallpaper"
      state_wallpaper="$now_wallpaper"
      state_blank=""
    fi

    now_blank="$(is_blank && echo 1 || echo 0)"
    if [[ "$state_blank" != "$now_blank" ]]; then
      if [[ "$now_blank" == 0 ]]; then
        set_blurred_wallpaper
      else
        set_original_wallpaper
      fi
      state_blank="$now_blank"
    fi
    sleep 0.5
  done
}

parse_opts() {
  while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -h | --help)
      echo "Usage: $BIN [-v|--verbose]"
      exit
      ;;
    -V | --version )
      echo version
      exit
      ;;
    -v | --verbose )
      VERBOSE=1
      ;;
  esac; shift; done
  if [[ "$1" == '--' ]]; then shift; fi
}

ensure_feh() {
  if ! command -v feh >/dev/null; then
    echo "$BIN requires Feh to set wallpapers."
    exit
  fi
}

ensure_gm() {
  if ! command -v gm >/dev/null; then
    echo "$BIN requires GraphicsMagick to set wallpapers."
    exit
  fi
}

ensure_wmctrl() {
  if ! command -v wmctrl >/dev/null; then
    echo "$BIN requires wmctrl to detect events."
    exit
  fi
}

main() {
  ensure_feh
  ensure_gm
  ensure_wmctrl
  parse_opts "$@"
  kill_other_instances
  run_loop
}

finish () {
  info "Destroying the cache"
  rm -rf "$CACHE_DIR"

  info "Resetting wallpaper"
  feh --bg-fill "$wall_source"
  exit 1
}

trap finish EXIT
trap finish SIGHUP
trap finish SIGINT
trap finish SIGTERM
main "$@"
