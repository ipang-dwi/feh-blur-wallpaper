#!/usr/bin/env bash
# https://github.com/rstacruz/feh-blur

PROC_EXPR="bash.*$(basename "$0")"

# How much to blur
# BLUR="0x4 0x8 0x16"  # less
# BLUR="0x6 0x12 0x24"  # medium
BLUR="0x8 0x16 0x32"  # moar

# The name of this program
BIN="$(basename "$0")"

# Where to write stuff
CACHE_DIR="/tmp/feh-blur.$$"

# Interval between frames in an animation
ANIMATION_INTERVAL=0.005

# Fade in and out?
ANIMATE_FADE=1

# Interval to check with wmctrl
POLL_INTERVAL=0.3

# The verbosity. --verbose sets this to 2, and --quiet sets it to 0.
VERBOSE=1

# Run mode. -d sets this to background (daemon) mode.
MODE=foreground

# Image extension to use. 'ppm' is used because it's faster to read/write to, I
# think.
EXT="ppm"

# Guard so that do_cleanup will only be invoked once.
CLEANING_UP=0

# The original source.
wall_original="$CACHE_DIR/original.$EXT"

# Echo some info. Only if verbose=1
info () {
  if [[ "$VERBOSE" -gt 0 ]]; then
    echo "    $1"
  fi
}

head () {
  if [[ "$VERBOSE" -gt 0 ]]; then
    echo ""
    echo -e " \033[31m>>\033[32m $1\033[0m"
  fi
}

# Log some debug info
debug () {
  if [[ "$VERBOSE" -gt 1 ]]; then
    echo "  - $1"
  fi
}

# Generate a bunch of images
generate_blurred_images () {
  mkdir -p "$CACHE_DIR"
  local source="$1"
  local original="$CACHE_DIR/original.$EXT"

  gm convert "$source" -resize 1920x "$original"

  head "Found wallpaper"
  info "$source"
  info "Generating blurred images..."
  gm convert "$original" \
    -scale 33% \
    -blur "$(echo "$BLUR" | cut -d' ' -f 1)" \
    -fill "#000" -colorize 7% \
    -scale 300% \
    "$CACHE_DIR/blur-0.$EXT"
  gm convert "$CACHE_DIR/blur-0.$EXT" \
    -scale 33% \
    -blur "$(echo "$BLUR" | cut -d' ' -f 2)" \
    -fill "#000" -colorize 12% \
    -scale 300% \
    "$CACHE_DIR/blur-1.$EXT"
  gm convert "$CACHE_DIR/blur-0.$EXT" \
    -scale 33% \
    -blur "$(echo "$BLUR" | cut -d' ' -f 3)" \
    -fill "#000" -colorize 20% \
    -scale 300% \
    "$CACHE_DIR/blur-final.$EXT"
  info "Done."
}

# Get current feh wallpaper
get_feh_wallpaper() {
  tail -n1 "$HOME/.fehbg" | cut -d"'" -f2
}

# get_current_workspace => "2"
get_current_workspace() {
  # 2 * DG: N/A VP: 0,0 WA: N/A Name
  wmctrl -d | grep '\*' | cut -d' ' -f1
}

# get_open_windows_count() => "2"
get_open_windows_count() {
  workspace="$(get_current_workspace)"
  wmctrl -l | cut -d' ' -f3 | grep -c "$workspace"
}

is_blank() {
  count=$(get_open_windows_count)
  [[ "$count" -eq 0 ]]
}

set_blurred_wallpaper() {
  debug "Setting blurred wallpaper"

  if [[ "$ANIMATE_FADE" == 1 ]]; then
    # We're going to redirect output to /dev/null to supress feh warnings
    feh --no-fehbg --bg-fill "$CACHE_DIR/blur-0.$EXT" &> /dev/null
    sleep $ANIMATION_INTERVAL
    feh --no-fehbg --bg-fill "$CACHE_DIR/blur-1.$EXT" &> /dev/null
    sleep $ANIMATION_INTERVAL
  fi

  feh --no-fehbg --bg-fill "$CACHE_DIR/blur-final.$EXT" &> /dev/null
}

set_original_wallpaper() {
  debug "Setting original wallpaper"

  if [[ "$ANIMATE_FADE" == 1 ]]; then
    feh --no-fehbg --bg-fill "$CACHE_DIR/blur-1.$EXT" &> /dev/null
    sleep $ANIMATION_INTERVAL
    feh --no-fehbg --bg-fill "$CACHE_DIR/blur-0.$EXT" &> /dev/null
    sleep $ANIMATION_INTERVAL
  fi

  feh --no-fehbg --bg-fill "$wall_original" &> /dev/null
}

kill_other_instances() {
  if [[ "$(pgrep -fcl "$PROC_EXPR")" -gt 1 ]]; then
    head "Stopping other instances of $BIN..."

    local count=1
    while [[ "$(pgrep -fcl "$PROC_EXPR")" -gt 1 ]]; do
      count=$(( count + 1 ))
      old_pid="$(pgrep -fo "$PROC_EXPR")"

      # Kill it; if it refuses after some time, force-stop it
      if [[ "$count" -gt 10 ]]; then
        kill -9 "$old_pid"
      else
        kill "$old_pid"
      fi
      sleep 0.1
    done
  fi
}

run_loop () {
  prev_blank="-"
  prev_wallpaper="-"

  while true; do
    wallpaper="$(get_feh_wallpaper)"

    # Check if wallpaper has changed.
    if [[ "$prev_wallpaper" != "$wallpaper" ]]; then
      # If there's no wallpaper, try again later.
      if [[ -z "$wallpaper" ]]; then
        sleep "$POLL_INTERVAL"
        continue
      else
        generate_blurred_images "$wallpaper"
        prev_wallpaper="$wallpaper"
        prev_blank=""
      fi
    fi

    blank="$(is_blank && echo 1 || echo 0)"
    if [[ "$prev_blank" != "$blank" ]]; then
      if [[ "$blank" == 0 ]]; then
        set_blurred_wallpaper
      else
        set_original_wallpaper
      fi
      prev_blank="$blank"
    fi
    sleep "$POLL_INTERVAL"
  done
}

show_help() {
  echo "Usage: $BIN [-v|--verbose]"
  echo ''
  echo 'Options:'
  echo ''
  echo '  -d, --daemon    Run in background'
  echo '  -s, --stop      Stop previously-ran daemon'
  echo ''
  echo '  -v, --verbose   Show more messages'
  echo '  -q, --quiet     Supress messages'
  echo ''
}

parse_opts() {
  while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -h | --help)
      show_help
      exit
      ;;
    -V | --version )
      echo version
      exit
      ;;
    -d | --daemon )
      MODE=background
      ;;
    -s | --stop )
      MODE=stop
      ;;
    -q | --quiet )
      VERBOSE=0
      ;;
    -v | --verbose )
      VERBOSE=2
      ;;
  esac; shift; done
  if [[ "$1" == '--' ]]; then shift; fi
}

ensure_feh() {
  if ! command -v feh >/dev/null; then
    echo "$BIN requires Feh to set wallpapers."
    exit
  fi
}

# Ensure that 'graphicsmagick' is available.
ensure_gm() {
  if ! command -v gm >/dev/null; then
    echo "$BIN requires GraphicsMagick to set wallpapers."
    exit
  fi
}

ensure_wmctrl() {
  if ! command -v wmctrl >/dev/null; then
    echo "$BIN requires wmctrl to detect events."
    exit
  fi
}

print_usage() {
  head "Monitoring changes"
  info "$BIN will now blur any wallpapers set using 'feh'."
  info "To change your wallpaper, try:"
  info ""
  info "    feh --bg-fill your-image.jpg"
}

main() {
  ensure_feh
  ensure_gm
  ensure_wmctrl
  parse_opts "$@"

  case "$MODE" in
    background)
      kill_other_instances
      print_usage
      "$0" --quiet & disown
      head "Background mode"
      info "$BIN started in background mode!"
      info "To stop, use '$BIN --stop'."
      ;;
  
    stop)
      kill_other_instances
      ;;

    *)
      kill_other_instances
      print_usage
      run_loop
      ;;
  esac
}

# Perform cleanup operations before stopping.
do_cleanup () {
  # Guard clause so that it's only ran once
  if [[ "$CLEANING_UP" == "1" ]]; then return; fi
  CLEANING_UP=1

  rm -rf "$CACHE_DIR"

  # Restore original wallpaper before exiting
  if [[ "$MODE" == "foreground" ]] && [[ -e "$HOME/.fehbg" ]]; then
    head "Restoring original wallpaper"
    source "$HOME/.fehbg"
  fi
}

finish () {
  do_cleanup
  exit 1
}

trap finish EXIT
trap finish SIGHUP
trap finish SIGINT
trap finish SIGTERM
main "$@"
